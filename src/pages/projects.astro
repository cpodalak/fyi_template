---
import Layout from '../components/Layout.astro';
import ProjectCard from '../components/ProjectCard.astro';
import { getCollection } from 'astro:content';

const allProjects = await getCollection('projects');
const sortedProjects = allProjects.sort((a, b) => a.data.order - b.data.order);

// Get unique tags
const allTags = [...new Set(sortedProjects.flatMap(project => project.data.tags))].sort();
---

<Layout
  title='Projects'
  description='A collection of my work, side projects, and contributions to the developer community.'
>
  <div class='px-4 py-16 sm:px-6 lg:px-8'>
    <div class='mx-auto max-w-6xl'>
      <!-- Header -->
      <div class='mb-12 text-center'>
        <h1 class='mb-4 text-4xl font-bold text-gray-900 dark:text-gray-100 sm:text-5xl'>
          Projects
        </h1>
        <p class='mx-auto max-w-3xl text-xl text-gray-600 dark:text-gray-400'>
          A showcase of my work, from personal projects to professional contributions. Each project
          represents a learning journey and a step forward in my development skills.
        </p>
      </div>

      <!-- Filter Tags -->
      {
        allTags.length > 0 && (
          <div class='mb-12'>
            <div class='flex flex-wrap justify-center gap-2'>
              <button
                class='filter-tag active rounded-full border border-gray-300 bg-gray-900 px-4 py-2 text-sm font-medium text-white transition-colors dark:border-gray-700 dark:bg-gray-100 dark:text-gray-900'
                data-tag='all'
              >
                All Projects
              </button>
              {allTags.map(tag => (
                <button
                  class='filter-tag rounded-full border border-gray-300 px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-100 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800'
                  data-tag={tag}
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>
        )
      }

      <!-- Projects Grid -->
      {
        sortedProjects.length > 0 ? (
          <div class='grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3' id='projects-grid'>
            {sortedProjects.map(project => (
              <div
                class='project-item animate-fade-in'
                data-tags={JSON.stringify(project.data.tags)}
              >
                <ProjectCard project={project} featured={project.data.featured} />
              </div>
            ))}
          </div>
        ) : (
          <div class='py-12 text-center'>
            <p class='text-lg text-gray-600 dark:text-gray-400'>
              Projects coming soon! Check back later.
            </p>
          </div>
        )
      }
    </div>
  </div>
</Layout>

<script>
  // Project filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-tag');
    const projectItems = document.querySelectorAll('.project-item');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedTag = button.getAttribute('data-tag');

        // Update active button
        filterButtons.forEach(btn =>
          btn.classList.remove(
            'active',
            'bg-gray-900',
            'text-white',
            'dark:bg-gray-100',
            'dark:text-gray-900'
          )
        );
        button.classList.add(
          'active',
          'bg-gray-900',
          'text-white',
          'dark:bg-gray-100',
          'dark:text-gray-900'
        );

        // Filter projects
        projectItems.forEach(item => {
          const projectTags = JSON.parse(item.getAttribute('data-tags') || '[]');
          const shouldShow = selectedTag === 'all' || projectTags.includes(selectedTag);

          if (shouldShow) {
            if (item.tagName === 'DIV') {
              (item as HTMLDivElement).style.display = 'block';
            }
            item.classList.add('animate-fade-in');
          } else {
            if (item.tagName === 'DIV') {
              (item as HTMLDivElement).style.display = 'none';
            }
            item.classList.remove('animate-fade-in');
          }
        });
      });
    });
  });
</script>
