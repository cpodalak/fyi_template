---
// Reading List & Book Notes Interactive Component
interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Get reading data from content collections
import { getEntry } from 'astro:content';
const readingData = await getEntry('widgets', 'reading');

// Fallback data structure if content is not available
const defaultBooks = {
  reading: [],
  read: [],
  wishlist: []
};

const books = readingData?.data || defaultBooks;
---

<div class={`card p-6 ${className || ''}`}>
  <div class="flex items-center justify-between mb-6">
    <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
      Reading Journey & Book Notes
    </h3>
    <div class="flex items-center gap-2">
      <span class="text-sm text-gray-500 dark:text-gray-400">
        {books.read?.length || 0} completed
      </span>
      <span class="text-gray-300 dark:text-gray-600">•</span>
      <span class="text-sm text-gray-500 dark:text-gray-400">
        {books.reading?.length || 0} in progress
      </span>
    </div>
  </div>

  <!-- Reading Status Tabs -->
  <div class="reading-tabs mb-6">
    <div class="flex space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
      <button
        class="reading-tab active flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm"
        data-tab="reading"
      >
        Currently Reading ({books.reading?.length || 0})
      </button>
      <button
        class="reading-tab flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
        data-tab="read"
      >
        Completed ({books.read?.length || 0})
      </button>
      <button
        class="reading-tab flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
        data-tab="wishlist"
      >
        Want to Read ({books.wishlist?.length || 0})
      </button>
    </div>
  </div>

  <!-- Currently Reading -->
  <div class="reading-content" data-content="reading">
    <div class="space-y-6">
      {books.reading?.map((book) => (
        <div class="book-item border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900 dark:text-gray-100 mb-1">
                {book.title}
              </h4>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                by {book.author}
              </p>
              <div class="flex flex-wrap gap-1 mb-3">
                {book.tags?.map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <!-- Progress Bar -->
          <div class="mb-3">
            <div class="flex items-center justify-between mb-1">
              <span class="text-sm text-gray-600 dark:text-gray-400">Progress</span>
              <span class="text-sm font-medium text-gray-900 dark:text-gray-100">{book.progress || 0}%</span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div
                class="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={`width: ${book.progress || 0}%`}
              ></div>
            </div>
          </div>

          <!-- Notes -->
          {book.notes && (
            <div class="mt-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-md">
              <p class="text-sm text-gray-700 dark:text-gray-300 italic">
                "{book.notes}"
              </p>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>

  <!-- Completed Books -->
  <div class="reading-content hidden" data-content="read">
    <div class="space-y-6">
      {books.read?.map((book) => (
        <div class="book-item border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-1">
                <h4 class="font-semibold text-gray-900 dark:text-gray-100">
                  {book.title}
                </h4>
                {book.rating && (
                  <div class="flex items-center">
                    {Array.from({ length: 5 }, (_, i) => (
                      <svg
                        class={`w-4 h-4 ${i < (book.rating || 0) ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`}
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                      </svg>
                    ))}
                  </div>
                )}
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                by {book.author} • Completed {book.completedDate ? new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short' }).format(new Date(book.completedDate)) : 'N/A'}
              </p>
              <div class="flex flex-wrap gap-1 mb-3">
                {book.tags?.map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <!-- Notes -->
          {book.notes && (
            <div class="mb-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-md">
              <p class="text-sm text-gray-700 dark:text-gray-300 italic">
                "{book.notes}"
              </p>
            </div>
          )}

          <!-- Key Takeaways -->
          {book.keyTakeaways && book.keyTakeaways.length > 0 && (
            <div class="mt-3">
              <h5 class="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">Key Takeaways:</h5>
              <ul class="list-disc list-inside space-y-1">
                {book.keyTakeaways.map((takeaway) => (
                  <li class="text-sm text-gray-600 dark:text-gray-400">{takeaway}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>

  <!-- Want to Read -->
  <div class="reading-content hidden" data-content="wishlist">
    <div class="space-y-4">
      {books.wishlist?.map((book) => (
        <div class="book-item border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-1">
                <h4 class="font-semibold text-gray-900 dark:text-gray-100">
                  {book.title}
                </h4>
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  book.priority === 'high'
                    ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                    : book.priority === 'medium'
                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                    : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
                }`}>
                  {book.priority || 'low'} priority
                </span>
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                by {book.author}
              </p>
              <p class="text-sm text-gray-700 dark:text-gray-300 mb-3">
                {book.reason || book.description || 'No description available'}
              </p>
              <div class="flex flex-wrap gap-1">
                {book.tags?.map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  // Client-side tab functionality
  document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.reading-tab');
    const contents = document.querySelectorAll('.reading-content');

    tabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        const targetTab = tab.getAttribute('data-tab');

        // Update active tab
        tabs.forEach((t) => {
          t.classList.remove('active', 'bg-white', 'dark:bg-gray-700', 'text-gray-900', 'dark:text-gray-100', 'shadow-sm');
          t.classList.add('text-gray-600', 'dark:text-gray-400');
        });

        tab.classList.add('active', 'bg-white', 'dark:bg-gray-700', 'text-gray-900', 'dark:text-gray-100', 'shadow-sm');
        tab.classList.remove('text-gray-600', 'dark:text-gray-400');

        // Show target content
        contents.forEach((content) => {
          content.classList.add('hidden');
        });

        const targetContent = document.querySelector(`[data-content="${targetTab}"]`);
        if (targetContent) {
          targetContent.classList.remove('hidden');
        }
      });
    });
  });
</script>
