---
interface Props {
  title: string;
  prompt: string;
  use: string;
  category?: string;
}

const { title, prompt, use, category = 'General' } = Astro.props;
// const promptId = `prompt-${title.toLowerCase().replace(/\s+/g, '-')}`;  // Unused variable
---

<div class='card group p-6 transition-shadow hover:shadow-lg'>
  <div class='mb-3 flex items-start justify-between'>
    <div>
      <h3 class='font-semibold text-gray-900 dark:text-gray-100'>{title}</h3>
      <span
        class='rounded bg-blue-100 px-2 py-1 text-xs text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      >
        {category}
      </span>
    </div>
    <button
      class='copy-btn rounded-md bg-gray-100 px-3 py-1 text-xs opacity-0 transition-opacity hover:bg-gray-200 group-hover:opacity-100 dark:bg-gray-700 dark:hover:bg-gray-600'
      data-text={prompt}
      title='Copy prompt'
    >
      Copy
    </button>
  </div>

  <p class='mb-3 text-sm text-gray-600 dark:text-gray-300'>
    <strong>Use for:</strong>
    {use}
  </p>

  <div class='rounded-lg bg-gray-50 p-4 dark:bg-gray-800'>
    <code class='text-sm leading-relaxed text-gray-800 dark:text-gray-200'>
      {prompt}
    </code>
  </div>
</div>

<script>
  // Copy functionality for this component
  document.addEventListener('DOMContentLoaded', () => {
    const copyBtn = document.querySelector(`[data-text="${prompt}"]`);

    if (copyBtn) {
      copyBtn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(String(prompt));
          const originalText = copyBtn.textContent;
          copyBtn.textContent = 'Copied!';
          copyBtn.classList.add(
            'bg-green-100',
            'dark:bg-green-900',
            'text-green-800',
            'dark:text-green-200'
          );

          setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.classList.remove(
              'bg-green-100',
              'dark:bg-green-900',
              'text-green-800',
              'dark:text-green-200'
            );
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    }
  });
</script>
