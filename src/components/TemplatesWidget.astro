---
// Templates & Frameworks Interactive Component
interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Get templates data from content collections
import { getEntry } from 'astro:content';
const templatesData = await getEntry('widgets', 'templates');

// Fallback data if content is not available
const defaultTemplates: any[] = [];
const templates = templatesData?.data?.featured || defaultTemplates;
---

<div class={`card p-6 ${className || ''}`}>
  <div class='mb-6 flex items-center justify-between'>
    <h3 class='text-xl font-semibold text-gray-900 dark:text-gray-100'>Templates & Frameworks</h3>
    <span class='text-sm text-gray-500 dark:text-gray-400'>
      {templates.length} templates
    </span>
  </div>

  <!-- Category Filter -->
  <div class='mb-6'>
    <div class='template-filter' data-component='template-filter'>
      <label
        for='category-filter'
        class='mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300'
      >
        Filter by Category:
      </label>
      <select
        id='category-filter'
        class='block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100'
      >
        <option value='all'>All Categories</option>
        <option value='Product Management'>Product Management</option>
        <option value='Development'>Development</option>
        <option value='Research'>Research</option>
        <option value='Planning'>Planning</option>
      </select>
    </div>
  </div>

  <!-- Templates List -->
  <div class='space-y-4'>
    {
      templates.length > 0 ? (
        templates.map(template => (
          <div
            class='template-item overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700'
            data-category={template.category || 'General'}
          >
            <div class='p-4'>
              <div class='mb-2 flex items-start justify-between'>
                <div class='flex-1'>
                  <div class='mb-1 flex items-center gap-2'>
                    <h4 class='font-semibold text-gray-900 dark:text-gray-100'>
                      {template.title || 'Untitled Template'}
                    </h4>
                    <span class='inline-flex items-center rounded bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200'>
                      {template.category || 'General'}
                    </span>
                  </div>
                  <p class='mb-3 text-sm text-gray-600 dark:text-gray-400'>
                    {template.description || 'No description available'}
                  </p>
                  <div class='mb-3 flex flex-wrap gap-1'>
                    {template.tags?.map((tag: any) => (
                      <span class='inline-flex items-center rounded bg-gray-100 px-2 py-1 text-xs text-gray-700 dark:bg-gray-800 dark:text-gray-300'>
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              <div class='flex items-center gap-2'>
                <button
                  class='template-toggle text-sm text-blue-600 transition-colors hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300'
                  data-template-id={template.id}
                >
                  View Template
                </button>
                <button
                  class='template-copy text-sm text-gray-600 transition-colors hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-300'
                  data-template-id={template.id}
                  data-content={template.content}
                >
                  Copy to Clipboard
                </button>
              </div>
            </div>

            {/* Template Content (Initially Hidden) */}
            <div
              class='template-content hidden border-t border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800'
              data-template-id={template.id}
            >
              <div class='p-4'>
                <pre class='overflow-x-auto whitespace-pre-wrap font-mono text-sm leading-relaxed text-gray-700 dark:text-gray-300'>
                  {template.content || 'No content available for this template.'}
                </pre>
              </div>
            </div>
          </div>
        ))
      ) : (
        <div class='py-8 text-center text-gray-500 dark:text-gray-400'>
          <p>No templates available at the moment.</p>
          <p class='mt-2 text-sm'>Check back later for useful templates and frameworks!</p>
        </div>
      )
    }
  </div>
</div>

<script>
  // Client-side interactivity
  document.addEventListener('DOMContentLoaded', () => {
    // Category filtering
    const categoryFilter = document.getElementById('category-filter');
    const templateItems = document.querySelectorAll('.template-item');

    if (categoryFilter) {
      categoryFilter.addEventListener('change', e => {
        const selectedCategory = (e.target as HTMLSelectElement).value;

        templateItems.forEach(item => {
          const category = item.getAttribute('data-category');

          if (selectedCategory === 'all' || category === selectedCategory) {
            (item as HTMLElement).style.display = 'block';
          } else {
            (item as HTMLElement).style.display = 'none';
          }
        });
      });
    }

    // Template toggle functionality
    const toggleButtons = document.querySelectorAll('.template-toggle');
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const templateId = button.getAttribute('data-template-id');
        const content = document.querySelector(
          `[data-template-id="${templateId}"].template-content`
        );

        if (content) {
          const isHidden = content.classList.contains('hidden');
          content.classList.toggle('hidden', !isHidden);
          button.textContent = isHidden ? 'Hide Template' : 'View Template';
        }
      });
    });

    // Copy to clipboard functionality
    const copyButtons = document.querySelectorAll('.template-copy');
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const content = button.getAttribute('data-content');

        if (content && navigator.clipboard) {
          try {
            await navigator.clipboard.writeText(content);
            button.textContent = 'Copied!';
            setTimeout(() => {
              button.textContent = 'Copy to Clipboard';
            }, 2000);
          } catch (err) {
            console.error('Failed to copy: ', err);
            button.textContent = 'Copy Failed';
            setTimeout(() => {
              button.textContent = 'Copy to Clipboard';
            }, 2000);
          }
        }
      });
    });
  });
</script>
