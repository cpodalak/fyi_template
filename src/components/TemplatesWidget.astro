---
// Templates & Frameworks Interactive Component
interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Get templates data from content collections
import { getEntry } from 'astro:content';
const templatesData = await getEntry('widgets', 'templates');

// Fallback data if content is not available
const defaultTemplates = [];
const templates = templatesData?.data?.featured || defaultTemplates;
---

<div class={`card p-6 ${className || ''}`}>
  <div class="flex items-center justify-between mb-6">
    <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
      Templates & Frameworks
    </h3>
    <span class="text-sm text-gray-500 dark:text-gray-400">
      {templates.length} templates
    </span>
  </div>

  <!-- Category Filter -->
  <div class="mb-6">
    <div class="template-filter" data-component="template-filter">
      <label for="category-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Filter by Category:
      </label>
      <select
        id="category-filter"
        class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="all">All Categories</option>
        <option value="Product Management">Product Management</option>
        <option value="Development">Development</option>
        <option value="Research">Research</option>
        <option value="Planning">Planning</option>
      </select>
    </div>
  </div>

  <!-- Templates List -->
  <div class="space-y-4">
    {templates.length > 0 ? templates.map((template) => (
      <div class="template-item border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden" data-category={template.category || 'General'}>
        <div class="p-4">
          <div class="flex items-start justify-between mb-2">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-1">
                <h4 class="font-semibold text-gray-900 dark:text-gray-100">
                  {template.title || 'Untitled Template'}
                </h4>
                <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                  {template.category || 'General'}
                </span>
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
                {template.description || 'No description available'}
              </p>
              <div class="flex flex-wrap gap-1 mb-3">
                {template.tags?.map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <div class="flex items-center gap-2">
            <button
              class="template-toggle text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
              data-template-id={template.id}
            >
              View Template
            </button>
            <button
              class="template-copy text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-300 transition-colors"
              data-template-id={template.id}
              data-content={template.content}
            >
              Copy to Clipboard
            </button>
          </div>
        </div>

        <!-- Template Content (Initially Hidden) -->
        <div class="template-content hidden border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800" data-template-id={template.id}>
          <div class="p-4">
            <pre class="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap font-mono leading-relaxed overflow-x-auto">
              {template.content || 'No content available for this template.'}
            </pre>
          </div>
        </div>
      </div>
    )) : (
      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
        <p>No templates available at the moment.</p>
        <p class="text-sm mt-2">Check back later for useful templates and frameworks!</p>
      </div>
    )}
  </div>
</div>

<script>
  // Client-side interactivity
  document.addEventListener('DOMContentLoaded', () => {
    // Category filtering
    const categoryFilter = document.getElementById('category-filter');
    const templateItems = document.querySelectorAll('.template-item');

    if (categoryFilter) {
      categoryFilter.addEventListener('change', (e) => {
        const selectedCategory = (e.target as HTMLSelectElement).value;

        templateItems.forEach((item) => {
          const category = item.getAttribute('data-category');

          if (selectedCategory === 'all' || category === selectedCategory) {
            (item as HTMLElement).style.display = 'block';
          } else {
            (item as HTMLElement).style.display = 'none';
          }
        });
      });
    }

    // Template toggle functionality
    const toggleButtons = document.querySelectorAll('.template-toggle');
    toggleButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const templateId = button.getAttribute('data-template-id');
        const content = document.querySelector(`[data-template-id="${templateId}"].template-content`);

        if (content) {
          const isHidden = content.classList.contains('hidden');
          content.classList.toggle('hidden', !isHidden);
          button.textContent = isHidden ? 'Hide Template' : 'View Template';
        }
      });
    });

    // Copy to clipboard functionality
    const copyButtons = document.querySelectorAll('.template-copy');
    copyButtons.forEach((button) => {
      button.addEventListener('click', async () => {
        const content = button.getAttribute('data-content');

        if (content && navigator.clipboard) {
          try {
            await navigator.clipboard.writeText(content);
            button.textContent = 'Copied!';
            setTimeout(() => {
              button.textContent = 'Copy to Clipboard';
            }, 2000);
          } catch (err) {
            console.error('Failed to copy: ', err);
            button.textContent = 'Copy Failed';
            setTimeout(() => {
              button.textContent = 'Copy to Clipboard';
            }, 2000);
          }
        }
      });
    });
  });
</script>
